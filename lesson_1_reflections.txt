Version Control Notes:
You can compare two files in windows command prompt using the FC command.
cd to the folder your files are in, then FC file1 file2

Can save a lot of time if you have large files. It would be easier to figure out where my 
code went wrong using version control. Also, its easy to compare versions and refresh my
memory this way. I worked on a big personal project a few years back. Now it's gonna be 
super hard to figure out what I did. Some commits and seeing what's different would really
help. 

How did viewing a diff between two versions of a file help you see the bug that was introduced?
Instead of reading through hundreds of lines one at a time,
FC showed where there were changes and then I could spot 
the typo. 
Benefits: Reduces number of lines to compare
		  Relevant lines show up in the same window.
		  
How could having easy access to the entire history of a file make you a more efficient programmer in the long term?
You can backtrack to a working version if something goes wrong
There is less to keep track of


What do you think are the pros and cons of manually choosing 
when to create a commit, like you do in Git, 
vs having versions automatically saved, like Google Docs does?

Pros: More control
	  commits can all be meaningful
	  commit message saves you time. You won't have to read each file.
Cons: You might forget to save
	  What if something happens to your power??? You lose everything.

Why do you think some version control systems, like Git, 
allow saving multiple files in one commit,
while others, like Google Docs, treat each file separately?
Git is built so that you can collaborate on inter-dependent large projects.
I feel like google docs is built so you can collaborate on single independent files. 


How can you use the commands git log 
and git diff to view the history of files?

git log shows all of the commits with their dates and messages
git diff commit_id1 commit_id2 shows the changes from
commit 1 to commit 2


How might using version control make you more confident to 
make changes that could break something?

Using git checkout commitid you could revert to older version to figure out at which
commit you added the bug. Then you can use git diff to find the
changes from working to commit to buggy commit. 
You can make changes without being afraid to break the program. 


Now that you have your workspace set up,
 what do you want to try using Git for?
 
I want to use git to help me keep track of the 
code that I write. Maybe it will encourage me to make 
changes I would usually be afraid of???

It'll save me time to see the incremental progress of my programs.


